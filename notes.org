* Setup Notes / Attempt To Deploy On Render.com
<2022-11-09 Wed 18:42>: I set this lab up initially with these commands:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects$ git clone git@github.com:learn-co-curriculum/project-template-react-rails-api.git CraigsCookout
Cloning into 'CraigsCookout'...
remote: Enumerating objects: 165, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 165 (delta 6), reused 10 (delta 4), pack-reused 153
Receiving objects: 100% (165/165), 406.07 KiB | 3.17 MiB/s, done.
Resolving deltas: 100% (41/41), done.

sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects$ cd CraigsCookout/
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ git remote rm origin
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ git remote add origin git@github.com:SamuelBanya/CraigsCookout.git
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ git push -u origin main
Enumerating objects: 165, done.
Counting objects: 100% (165/165), done.
Delta compression using up to 8 threads
Compressing objects: 100% (110/110), done.
Writing objects: 100% (165/165), 406.06 KiB | 25.38 MiB/s, done.
Total 165 (delta 41), reused 165 (delta 41), pack-reused 0
remote: Resolving deltas: 100% (41/41), done.
To github.com:SamuelBanya/CraigsCookout.git
 * [new branch]      main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
#+end_src

I then ran these commands to install the dependencies:
#+begin_src bash
bundle install
rails db:create
npm install --prefix client
#+end_src

<2022-11-09 Wed 18:46>: I tried 'bundle install' but received this specific error in '/usr/share/rvm/gems/ruby-2.7.4/extensions/x86_64-linux/2.7.0/pg-1.2.3/mkmf.log':
#+begin_src bash
conftest.c:3:10: fatal error: libpq-fe.h: No such file or directory
#+end_src

I then found this StackOverflow post:
- https://stackoverflow.com/questions/50272096/pg-1-0-0-fatal-error-libpq-fe-h-file-not-found

I then installed 'libpq-dev' with this command:
#+begin_src bash
sudo apt install libpq-dev
#+end_src

<2022-11-09 Wed 18:56>: I then installed the 'PostgresSQL' dependencies via these commands:
#+begin_src bash
sudo apt update
sudo apt install postgresql postgresql-contrib libpq-dev
#+end_src

I then verified the installation via the 'psql --version' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ psql --version
psql (PostgreSQL) 14.5 (Ubuntu 14.5-0ubuntu0.22.04.1)
#+end_src

I then started the 'psql' service with the 'sudo service postgresql start' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ sudo service postgresql start
 * Starting PostgreSQL 14 database server
#+end_src

I checked what the operating system name was under WSL2 with the 'whoami' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ whoami
sam
#+end_src

I then created a 'postgres' user with the following command:
#+begin_src bash
sudo -u postgres -i

sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ sudo -u postgres -i
Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.10.102.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This message is shown once a day. To disable it please create the
/var/lib/postgresql/.hushlogin file.
postgres@HTCSamuelB:~$ createuser -sr sam
postgres@HTCSamuelB:~$
logout
#+end_src

I then went to my Render.com account, and created a new 'PostgresSQL' instance and named it 'psql'.

<2022-11-09 Wed 19:04>: I then proceeded to follow the 'Deploying' steps.

I then deleted the 'Master Key File', 'config/credentials.yml.enc'.

I then ran the following command in terminal:
#+begin_src bash
EDITOR="code --wait" bin/rails credentials:edit
#+end_src

I then copied the credentials that popped up in a new VS Code buffer into a scratch buffer in Emacs so that I can later use them on Render.com

I then went to the 'craigscookoutpsql' instance on Render.com, and clicked 'Connect' > External Connection, and utilized the related 'PSQL' terminal command present so that I can connect to the database.

I then used the following SQL command while connected to the 'PSQL' instance:
#+begin_src bash
CREATE DATABASE craigscookout_db
#+end_src

I then verified my work by using the '\l' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ PGPASSWORD=UwAqth4KzvZI83dlq5FNJm7w4AXqHHng psql -h dpg-cdm54o2rrk0d9h01tv6g-a.ohio-postgres.render.com -U psql_pbn2_user psql_pbn2
psql (14.5 (Ubuntu 14.5-0ubuntu0.22.04.1), server 15.0)
WARNING: psql major version 14, server major version 15.
         Some psql features might not work.
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_128_GCM_SHA256, bits: 128, compression: off)
Type "help" for help.

psql_pbn2=> CREATE DATABASE craigscookout_db;
CREATE DATABASE

psql_pbn2=> \l
                                       List of databases
       Name       |     Owner      | Encoding |  Collate   |   Ctype    |   Access privileges
------------------+----------------+----------+------------+------------+-----------------------
 craigscookout_db | psql_pbn2_user | UTF8     | en_US.UTF8 | en_US.UTF8 |
 postgres         | postgres       | UTF8     | en_US.UTF8 | en_US.UTF8 |
 psql_pbn2        | psql_pbn2_user | UTF8     | en_US.UTF8 | en_US.UTF8 |
 template0        | postgres       | UTF8     | en_US.UTF8 | en_US.UTF8 | =c/postgres          +
                  |                |          |            |            | postgres=CTc/postgres
 template1        | postgres       | UTF8     | en_US.UTF8 | en_US.UTF8 | =c/postgres          +
                  |                |          |            |            | postgres=CTc/postgres
#+end_src

I then used the '\q' command to exit PSQL.

I then created a new Render Web Service by clicking the "New +" button > Web Service, and found the 'CraigsCookout' GitHub repo.

I then set the 'Build' command to:
./bin/render-build.sh

I then set the 'Start' command to 'bundle exec puma -C config/puma.rb'

I then opened up a separate tab and navigated to the 'psql' PostgreSQL instance and went to Connection > Internal Database URL, and copied the URL.

I then returned to the 'CraigsCookout' tab in Render.com, and went to Advanced > Add Environment Variable, and used:
#+begin_src bash
DATABASE_URL (pasted the Internal Database URL I copied --> I replaced the very last section with 'craigscookout_db')
#+end_src

I then clicked the 'Add Environment Variable' button again, and added:
#+begin_src bash
RAILS_MASTER_KEY (inserted 'secret_key_base' value from earlier from the secrets file generated in VS Code)
#+end_src

<2022-11-09 Wed 20:10>: The Render.com deployment is not going well, and I blame the main GitHub repo for probably not having tested this whole process themselves recently since it doesn't even work.

With this in mind, I had to adjust the React 'scripts' in 'client/package.json' with the following revisions to add the '--openssl-legacy-provider' parameter due to the '' error I received:
Related 'ERR_OSSL_EVP_UNSUPPORTED' error I received
#+begin_src bash
 opensslErrorStack: [ 'error:03000086:digital envelope routines::initialization error' ],
  library: 'digital envelope routines',
  reason: 'unsupported',
  code: 'ERR_OSSL_EVP_UNSUPPORTED'
}
#+end_src

Related revision to include '--openssl-legacy-provider' parameter in 'client/package.json' manifest file:
#+begin_src js
  "scripts": {
    "start": "PORT=4000 react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
#+end_src

* Relationships For Phase 4 Project Requirements
<2022-11-09 Wed 20:21>: These are the table relationships I currently have:

- User:
#+begin_src ruby
has_many :cookouts
has_many :foods
through: :cookouts
#+end_src
- Cookout:
#+begin_src ruby
belongs_to :food
belongs_to :user
#+end_src
- Food:
#+begin_src ruby
has_many :cookouts
has_many :users
through: :cookouts
#+end_src

I then started by creating the associated user model accordingly with the 'rails g model user --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g model user --no-test-framework
Running via Spring preloader in process 15357
      invoke  active_record
      create    db/migrate/20221110022549_create_users.rb
      create    app/models/user.rb
#+end_src

I then modified the corresponding migration file, 'db/migrate/20221110022549_create_users.rb' with the following contents:
#+begin_src ruby
class CreateUsers < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :username
      t.string :password_digest

      t.timestamps
    end
  end
end
#+end_src

I then modified the associated 'app/models/user.rb' model file with the following contents to include the related Active Record associations:
#+begin_src ruby
class User < ApplicationRecord
    has_many :cookouts
    has_many :foods, through: :cookouts

    has_secure_password

    validates :username, presence: true, uniqueness: true
end
#+end_src

I then created a related model for the 'Cookout' model with the 'rails g model cookout --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g model user --no-test-frameworkCookout$ rails g model cookout --no-test-framework
Running via Spring preloader in process 15383
      invoke  active_record
      create    db/migrate/20221110023307_create_cookouts.rb
      create    app/models/cookout.rb
#+end_src

I then revised the 'db/migrate/20221110023307_create_cookouts.rb' migration file for the 'Cookout' model with the following contents:
#+begin_src ruby
class CreateCookouts < ActiveRecord::Migration[6.1]
  def change
    create_table :cookouts do |t|
      t.belongs_to :user, null: false, foreign_key: true
      t.belongs_to :food, null: false, foreign_key: true
      t.string :name
      t.string :start_time
      t.string :end_time

      t.timestamps
    end
  end
end
#+end_src

I then modified the 'app/models/cookout.rb' Cookout model with the following contents:
#+begin_src ruby
class Cookout < ApplicationRecord
    belongs_to :user

    validates :name, presence: true
    validates :start_time, presence: true
    validates :end_time, presence: true
end
#+end_src

I then created a related model for the 'Food' model with the 'rails g model food --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g model food --no-test-framework
Running via Spring preloader in process 15424
      invoke  active_record
      create    db/migrate/20221110024427_create_foods.rb
      create    app/models/food.rb
#+end_src

I then edited the corresponding 'db/migrate/20221110024427_create_foods.rb' migration file to include the following changes:
#+begin_src ruby
class CreateFoods < ActiveRecord::Migration[6.1]
  def change
    create_table :foods do |t|
      t.string :name

      t.timestamps
    end
  end
end
#+end_src

I then revised the corresponding model in the 'app/models/food.rb' file with the following contents:
#+begin_src ruby
class Food < ApplicationRecord
    has_many :cookouts
    has_many :users, through: :cookouts

    validates :name, presence: true
end
#+end_src

I then ran the corresponding 'rails db:migrate' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails db:migrate
== 20221110022549 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0102s
== 20221110022549 CreateUsers: migrated (0.0103s) =============================

== 20221110023307 CreateCookouts: migrating ===================================
-- create_table(:cookouts)
   -> 0.0048s
== 20221110023307 CreateCookouts: migrated (0.0049s) ==========================

== 20221110024427 CreateFoods: migrating ======================================
-- create_table(:foods)
   -> 0.0093s
== 20221110024427 CreateFoods: migrated (0.0094s) =============================
#+end_src

I then worked on creating the 'Sign Up' feature by creating the 'UsersController' with the 'rails g controller users_controller --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g controller users_controller --no-test-framework
Running via Spring preloader in process 15460
      create  app/controllers/users_controller.rb
#+end_src

I then modified the 'app/controllers/users_controller.rb' Users Controller file with the following revisions:
#+begin_src ruby
class UsersController < ApplicationController
    skip_before_action :authorize, only: :create

    def create
        user = User.create!(user_params)
        session[:user_id] = user.id
        render json: user, status: :created
    end

    def show
        render json: @current_user
    end

    private

    def user_params
        params.permit(:username, :password, :password_confirmation)
    end
end
#+end_src

I then modified the 'config/routes.rb' routes file to accommodate the 'users#create' method for the 'Sign Up' portion, and also the 'users#show' method to accommodate the automatic sign-in portion for the 'get /me' route:
#+begin_src ruby
Rails.application.routes.draw do

  # Routing logic: fallback requests for React Router.
  # Leave this here to help deploy your app later!
  resources :cookouts, only: [:index, :create]
  resources :foods, only: [:index, :create]
  post "/signup", to: "users#create"
  get "/me", to: "users#show"
  get "*path", to: "fallback#index", constraints: ->(req) { !req.xhr? && req.format.html? }
end
#+end_src

I then modified the overarching parent 'ApplicationController' within the 'app\controllers\application_controller.rb' file with the following contents:
#+begin_src ruby
class ApplicationController < ActionController::API
  include ActionController::Cookies

rescue_from ActiveRecord::RecordInvalid, with: :render_unprocessable_entity_response

before_action :authorize

private

def authorize
  @current_user = User.find_by(id: session[:user_id])

  render json: { errors: ["Not authorized"] }, status: :unauthorized unless @current_user
end

def render_unprocessable_entity_response(exception)
  render json: { errors: exception.record.errors.full_messages }, status: :unprocessable_entity
end

end
#+end_src

I then created a corresponding 'User' serializer with the 'rails g serializer user --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g serializer user --no-test-framework
Running via Spring preloader in process 15524
      create  app/serializers/user_serializer.rb
#+end_src

I then modified the contents of the 'app/serializers/user_serializer.rb' serializer with the following:
#+begin_src ruby
class UserSerializer < ActiveModel::Serializer
  attributes :id, :username
end
#+end_src

I then created the 'Login' feature by creating a 'SessionsController' with the 'rails g controller sessions_controller --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g controller sessions_controller --no-test-framework
Running via Spring preloader in process 15551
      create  app/controllers/sessions_controller.rb
#+end_src

I then modified the 'config/routes.rb' routes file with the following revisions:
#+begin_src ruby
Rails.application.routes.draw do

  # Routing logic: fallback requests for React Router.
  # Leave this here to help deploy your app later!
  resources :cookouts, only: [:index, :create]
  resources :foods, only: [:index, :create]
  post "/signup", to: "users#create"
  get "/me", to: "users#show"
  post "/login", to: "sessions#create"
  get "*path", to: "fallback#index", constraints: ->(req) { !req.xhr? && req.format.html? }
end
#+end_src

I then modified the contents of the 'app/controllers/sessions_controller.rb' Sessions Controller file with the following revisions for the 'create' method to log the user in:
#+begin_src ruby
class SessionsController < ApplicationController
    skip_before_action :authorize, only: :create

    def create
        user = User.find_by(username: params[:username])
        if user&.authenticate(params[:password])
            session[:user_id] = user.id
            render json: user
        else
            render json: { errors: ["Invalid username or password"] }, status: :unauthorized
        end
    end
end
#+end_src

I then added the 'Logout' feature by adding the 'DELETE /logout' route to the 'config/routes.rb' routes file:
#+begin_src ruby
Rails.application.routes.draw do

  # Routing logic: fallback requests for React Router.
  # Leave this here to help deploy your app later!
  resources :cookouts, only: [:index, :create]
  resources :foods, only: [:index, :create]
  post "/signup", to: "users#create"
  get "/me", to: "users#show"
  post "/login", to: "sessions#create"
  delete "/logout", to: "sessions#destroy"
  get "*path", to: "fallback#index", constraints: ->(req) { !req.xhr? && req.format.html? }
end
#+end_src

I then modified the 'app/controllers/sessions_controller.rb' Sessions controller to also handle a 'destroy' route to log the user out:
#+begin_src ruby
class SessionsController < ApplicationController
    skip_before_action :authorize, only: :create

    def create
        user = User.find_by(username: params[:username])
        if user&.authenticate(params[:password])
            session[:user_id] = user.id
            render json: user
        else
            render json: { errors: ["Invalid username or password"] }, status: :unauthorized
        end
    end

    def destroy
        session.delete :user_id
        head :no_content
    end
end
#+end_src

I then created the 'Cookouts' controller with the 'rails g controller cookouts_controller --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g controller cookouts_controller --no-test-framework
Running via Spring preloader in process 15600
      create  app/controllers/cookouts_controller.rb
#+end_src

I then revised the contents of the 'app/controllers/cookouts_controller.rb' Cookouts Controller with the following contents to include the 'index' method:
#+begin_src ruby
class CookoutsController < ApplicationController
    def index
        render json: Cookout.all
    end
end
#+end_src

I then further revised the 'Cookouts Controller' to include the 'create' method as well:
#+begin_src ruby
class CookoutsController < ApplicationController
    def index
        render json: Cookout.all
    end

    def create
        cookout = @current_user.cookouts.create!(cookout_params)
        render json: cookout, status: :created
    end

    private

    def cookout_params
        params.permit(:name, :start_time, :end_time)
    end
end
#+end_src

I then created a related serializer with the 'rails g serializer cookout --no-test-framework' command:
#+begin_src bash
sam@HTCSamuelB:/mnt/c/Users/Samuel.Banya/Documents/FlatironSchoolProjects/CraigsCookout$ rails g serializer cookout --no-test-framework
Running via Spring preloader in process 15621
      create  app/serializers/cookout_serializer.rb
#+end_src

I then modified the contents of the 'app/serializers/cookout_serializer.rb' Serializer with the following:
#+begin_src ruby
class CookoutSerializer < ActiveModel::Serializer
  attributes :id, :name, :start_time, :end_time
end
#+end_src
